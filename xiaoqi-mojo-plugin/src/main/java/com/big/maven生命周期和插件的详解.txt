maven 的常用命令
1. maven clean
2. maven compile
3. maven test
4. maven package
5. maven install
6. maven install -Dmaven.test.skip=true
7. maven deploy
8. maven help:system

maven的主要内容
1.用户自定义的属性的使用
    ${properties} 来替换重复使用的用户属性
2.maven 生命周期详解
    通常有这些环节：创建项目、编写代码、清理已编译的代码、编译代码、执行单元测试、打包、集成测试、验证、部署、生成站点等，
    这些环节组成了项目的生命周期，这些过程也叫做项目的构建过程，
    maven约定好了项目的结构，源码的位置、资源文件的位置、测试代码的位置、测试用到的资源文件的位置、静态资源的位置、打包之后文件的位置等，
    这些都是maven约定好的，所以清理代码
    用一个命令mvn clean就可以完成，不需要我们去配置清理的目标目录；
    用mvn compile命令就可以完成编译的操作；
    用mvn test就可以自动运行测试用例；
    用mvn package就可以将项目打包为jar、war格式的包，能够如此简单，
    主要还是maven中约定大于配置的结果。

    maven 中定义的三套生命周期
    1. clean 生命周期
        pre-clean 执行一些需要在clean之前完成的工作
        clean 移除所有上一次构建生成的文件
        post-clean 执行一些需要在clean之后立刻完成的工作

    2. default 生命周期 包含了23三个阶段
        validate  校验：校验项目是否正确并且所有必要的信息可以完成项目的构建过程。
        initialize 初始化：初始化构建状态，比如设置属性值。
        generate-sources 生成源代码：生成包含在编译阶段中的任何源代码。
        process-sources  处理源代码：处理源代码，比如说，过滤任意值。
        generate-resources 生成资源文件：生成将会包含在项目包中的资源文件。
        process-resources  编译：复制和处理资源到目标目录，为打包阶段最好准备
        compile 处理类文件：编译项目的源代码。
        process-classes 处理类文件：处理编译生成的文件，比如说对Java class文件做字节码改善优化。
        generate-test-sources 生成测试源代码：生成包含在编译阶段中的任何测试源代码。
        process-test-sources 处理测试源代码：处理测试源代码，比如说，过滤任意值。
        generate-test-resources 生成测试源文件：为测试创建资源文件。
        process-test-resources 处理测试源文件：复制和处理测试资源到目标目录。
        test-compile  编译测试源码：编译测试源代码到测试目标目录.
        process-test-classes 处理测试类文件：处理测试源码编译生成的文件。
        test	测试：使用合适的单元测试框架运行测试（Juint是其中之一）。
        prepare-package  准备打包：在实际打包之前，执行任何的必要的操作为打包做准备。
        package	打包：将编译后的代码打包成可分发格式的文件，比如JAR、WAR或者EAR文件
        pre-integration-test 集成测试前：在执行集成测试前进行必要的动作。比如说，搭建需要的环境。
        integration-test 集成测试：处理和部署项目到可以运行集成测试环境中。
        post-integration-test	集成测试后：在执行集成测试完成后进行必要的动作。比如说，清理集成测试环境。
        verify 验证：运行任意的检查来验证项目包有效且达到质量标准
        install	安装：安装项目包到本地仓库，这样项目包可以用作其他本地项目的依赖
        deploy 部署：将最终的项目包复制到远程仓库中与其他开发者和项目共享。

    3. site 生命周期
        pre-site 执行一些需要在生成站点文档之前完成的工作
        site 生成项目的站点文档
        post-site 执行一些需要在生成站点文档之后完成的工作，并且为部署做准备
        site-deploy 将生成的站点文档部署到特定的服务器上



        3套生命周期是相互独立的，没有依赖关系的，而每套生命周期中有多个阶段，
        每套中的多个阶段是有先后顺序的，并且后面的阶段依赖于前面的阶段，
        而用户可以直接使用mvn命令来调用这些阶段去完成项目生命周期中具体的操作

    约定大于配置
        ${basedir} 存放pom.xml 和所有的子目录
        ${basedir}/src/main/java 项目的java源代码
        ${basedir}/src/main/resources 项目的资源 比如说property文件，springmvc.xml
        ${basedir}/src/test/java 项目的测试类
        ${basedir}/src/test/resources 测试用的资源
        ${basedir}/src/main/webapp/WEB-INF web应用文件目录 web项目的信息 比如存放web.xml 本地图片 jsp视图页面
        ${basedir}/target   打包输出的目录
        ${basedir}/target/classes    编译输出的目录
        ${basedir}/target/test-classes 测试编译输出的目录
        Test.java          maven 只会自定运行符合该命名规则的测试类
        ~/.m2/repository   maven默认的本地仓库位置
3.maven 插件详解

